# -*- coding: utf-8 -*-
"""Aproximación de Funciones con Series de Taylor y MacLaurin

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/161t5YAdFPK9habxGr560EPAK28jI9ZcB
"""

import sympy as sp

import numpy as np

import matplotlib.pyplot as plt


def maclaurin_approximation():

    x = sp.symbols('x')

    # Entrada de la función y grado del polinomio

    func_input = input("Introduce la función a aproximar (en términos de x): ")

    f = sp.sympify(func_input)

    n = int(input("Grado del polinomio de MacLaurin: "))



    # Cálculo de la serie de MacLaurin

    maclaurin_series = sum([f.diff(x, i).subs(x, 0) / sp.factorial(i) * x**i for i in range(n + 1)])



    # Mostrar la serie resultante

    print("\nAproximación de MacLaurin:")

    sp.pprint(maclaurin_series)


    # Calcular el error en un rango de valores

    x_values = np.linspace(-2, 2, 100)



    # Evaluar la función real y la aproximación

    real_values = [float(f.evalf(subs={x: val})) for val in x_values]

    approx_values = [float(maclaurin_series.evalf(subs={x: val})) for val in x_values]

    errors = [abs(real - approx) for real, approx in zip(real_values, approx_values)]


    # Calcular error de truncación

    truncation_errors = []

    for val in x_values:

        # Calcular el (n+1)-ésimo término de la serie para el error de truncación

        c = val  # Puedes elegir c como cualquier valor entre 0 y val

        term = (f.diff(x, n + 1).subs(x, c) / sp.factorial(n + 1)) * (val ** (n + 1))

        truncation_errors.append(float(abs(term)))


    # Gráfica de comparación

    plt.figure(figsize=(12, 6))



    # Gráfico de la función real y la aproximación

    plt.subplot(1, 2, 1)

    plt.plot(x_values, real_values, label='Función Real', color='blue')

    plt.plot(x_values, approx_values, '--', label='Aproximación de MacLaurin', color='red')

    plt.title('Comparación: Función Real vs Aproximación')

    plt.xlabel('x')

    plt.ylabel('f(x)')

    plt.legend()

    plt.grid(True)


    # Gráfico del error

    plt.subplot(1, 2, 2)

    plt.plot(x_values, errors, label='Error de Aproximación', color='green', linestyle='--')

    plt.plot(x_values, truncation_errors, label='Error de Truncación', color='orange')

    plt.title('Errores de Aproximación y Truncación')

    plt.xlabel('x')

    plt.ylabel('Error')

    plt.legend()

    plt.grid(True)


    plt.tight_layout()

    plt.show()


# Ejecutar el programa

maclaurin_approximation()